package renderer

import (
	"strings"

	"github.com/es-debug/backend-academy-2024-go-template/internal/domain/maze"
	"github.com/es-debug/backend-academy-2024-go-template/internal/domain/maze/cells"
)

// transition - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –æ —Ç–æ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥–æ–º.
const transition cells.Type = -2

// expanderRenderer - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ "—Ä–∞—Å—à–∏—Ä—è—é—â–µ–≥–æ" —Ä–µ–Ω–¥–µ—Ä–∞.
type expanderRenderer struct {
	palette Palette
}

// newExpanderRenderer –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–æ–≤—ã–π expanderRenderer.
func newExpanderRenderer(palette Palette) *expanderRenderer {
	return &expanderRenderer{
		palette: expandPalette(palette),
	}
}

// Render –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç –≤ –≥–æ—Ç–æ–≤—É—é –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë.
func (r *expanderRenderer) Render(mz maze.Maze) string {
	return convertToString(expandMaze(mz), r.palette)
}

// Render –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç –∏ –ø—É—Ç—å –≤ –Ω—ë–º –≤ –≥–æ—Ç–æ–≤—É—é –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë.
func (r *expanderRenderer) RenderPath(mz maze.Maze, path []cells.Coordinates) string {
	return convertToString(expandMaze(overlayPath(mz, path)), r.palette)
}

// expandPalette –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∞–ª–∏—Ç—Ä—É.
func expandPalette(palette Palette) Palette {
	palette[transition] = "\U0001F532" // üî≤
	palette[Start] = "‚≠ê"
	palette[End] = "üö©"
	palette[Path] = "\U0001F7E9" // üü©

	return palette
}

// expandMaze –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–∞–±–∏—Ä–∏–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å—Ç–µ–Ω—ã.
func expandMaze(mz maze.Maze) maze.Maze {
	expandedMaze := maze.New(2*mz.Height-1, 2*mz.Width-1) // –ú–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ —Å—Ç–æ–ª–±–∞—Ü–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ.

	for y, row := range mz.Cells {
		for x, cell := range row {
			expandedX := 2 * x // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π.
			expandedY := 2 * y // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã Y –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π.

			expandedMaze.Cells[expandedY][expandedX].Type = mz.Cells[y][x].Type // –ü–µ—Ä–µ–Ω–æ—Å —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏.

			for _, adjacentCoords := range cell.Transitions {
				expandedMaze.Cells[expandedY][expandedX].Transitions = append(
					expandedMaze.Cells[expandedY][expandedX].Transitions,
					cells.Coordinates{
						X: 2 * adjacentCoords.X, // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π.
						Y: 2 * adjacentCoords.Y, // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã Y –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π.
					},
				)
			}
		}
	}

	return cutEdges(expandedMaze)
}

// cutEdges –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–µ–∂–¥—É –æ—Ç–æ–±—Ä–∞–∂—ë–Ω–Ω—ã–º–∏ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª–µ—Ç–∫–∞–º–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –∫–ª–µ—Ç–∫–∏ —Ç–∏–ø–∞ transition.
func cutEdges(mz maze.Maze) maze.Maze {
	for y, row := range mz.Cells {
		for x, cell := range row {
			if x%2 == 0 && y%2 == 0 { // –ü–æ —Ñ–æ—Ä–º—É–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—à—å —á—ë—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–º–µ—é—Ç —Å–º—ã—Å–ª–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É.
				for _, adjacentCoords := range cell.Transitions {
					edgeCoords := cells.Coordinates{
						X: (x + adjacentCoords.X) / 2, // X –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ —Å–µ—Ä–µ–¥–∏–Ω—ã –æ—Ç—Ä–µ–∑–∫–∞.
						Y: (y + adjacentCoords.Y) / 2, // Y –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ —Å–µ—Ä–µ–¥–∏–Ω—ã –æ—Ç—Ä–µ–∑–∫–∞.
					}

					_, ok1 := pathParts[cell.Type]
					_, ok2 := pathParts[mz.Cells[adjacentCoords.Y][adjacentCoords.X].Type]

					if ok1 && ok2 { // –ï—Å–ª–∏ –ø—Ä–æ—Ä–µ–∑–∞–µ–º–æ–µ —Ä–µ–±—Ä–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—É—Ç–∏.
						mz.Cells[edgeCoords.Y][edgeCoords.X].Type = Path
					} else {
						mz.Cells[edgeCoords.Y][edgeCoords.X].Type = transition
					}

					mz.Cells[edgeCoords.Y][edgeCoords.X].Transitions = append(
						mz.Cells[edgeCoords.Y][edgeCoords.X].Transitions,
						cells.Coordinates{X: x, Y: y},
					)

					mz.Cells[y][x].Transitions = append(
						mz.Cells[y][x].Transitions,
						edgeCoords,
					)
				}
			}
		}
	}

	return mz
}

// overlayPath –ø–æ–º–µ—á–∞–µ—Ç –∫–ª–µ—Ç–∫–∏ –Ω–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ path, –∫–∞–∫ Path.
func overlayPath(mz maze.Maze, path []cells.Coordinates) maze.Maze {
	for i, coords := range path {
		switch i {
		case 0:
			mz.Cells[coords.Y][coords.X].Type = Start
		case len(path) - 1:
			mz.Cells[coords.Y][coords.X].Type = End
		default:
			mz.Cells[coords.Y][coords.X].Type = Path
		}
	}

	return mz
}

// convertToString –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –ª–∞–±–∏—Ä–∏–Ω—Ç –≤ —Ñ–æ—Ä–º–µ —Å—Ç—Ä–æ–∫–∏.
func convertToString(mz maze.Maze, palette Palette) string {
	var result strings.Builder

	for _, row := range mz.Cells {
		for _, cell := range row {
			result.WriteString(palette[cell.Type])
		}

		result.WriteString("\n")
	}

	return result.String()
}
